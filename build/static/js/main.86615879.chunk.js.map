{"version":3,"sources":["app/utils/enums/routes.ts","app/utils/enums/http-status-codes.ts","app/pages/CountrySearch/index.tsx","app/services/http-service.ts","app/utils/constants/index.ts","app/services/country-service.ts","app/configs/index.ts","app/components/Country/CountryCard/index.tsx","app/components/Weather/WeatherInfoModal/index.tsx","app/services/weather-service.ts","app/pages/CountryList/index.tsx","app/components/Navbar/index.tsx","app/configs/theme/index.ts","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Routes","HttpStatusCodes","useStyles","makeStyles","theme","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","backgroundColor","palette","secondary","main","form","width","submit","CountrySearch","classes","history","useHistory","useState","countryNameInput","setCountryNameInput","countrySearchRoute","Countries","Container","component","maxWidth","CssBaseline","className","noValidate","autoComplete","onSubmit","e","preventDefault","push","TextField","value","required","fullWidth","autoFocus","label","variant","onChange","target","Button","color","disabled","Boolean","type","httpClient","axios","interceptors","response","use","error","status","Unauthorized","BadRequest","InternalServerError","console","log","Promise","reject","countryHttpClient","create","baseURL","process","countryService","getByName","countryName","get","getAll","root","title","fontSize","media","height","centered","justifyContent","customCard","CountryCard","country","onClickWeatherCapitalButton","Card","CardActionArea","CardMedia","image","flag","name","Divider","CardContent","Typography","gutterBottom","capital","population","latlng","CardActions","onClick","size","minHeight","loader","closeButton","position","right","top","grey","centerContent","WeatherInfoModal","open","handleClose","capitalWeatherInfo","Dialog","onClose","aria-labelledby","DialogTitle","disableTypography","id","IconButton","aria-label","DialogContent","dividers","location","current","weather_icons","map","weatherIconUrl","Avatar","src","temperature","wind_speed","precip","DialogActions","weatherHttpClient","weatherService","getWeatherByCity","cityName","cardGrid","paddingTop","paddingBottom","CountryList","useParams","loading","setLoading","showWeatherInfoModal","setShowWeatherInfoModal","countries","setCountries","setCapitalWeatherInfo","handleGetCapitalWeatherInfo","currentCountry","a","result","data","getCountries","useEffect","Grid","container","CircularProgress","length","item","xs","sm","md","alpha2Code","toolbar","h5","Navbar","AppBar","Toolbar","appTheme","createTheme","typography","fontFamily","App","ThemeProvider","exact","path","Home","CountriesByName","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.86615879.chunk.js","sourcesContent":["export enum Routes {\r\n  Home = '/',\r\n  Countries = '/countries',\r\n  CountriesByName = '/countries/:countryName',\r\n}\r\n","export enum HttpStatusCodes {\r\n  Ok = 200,\r\n  BadRequest = 400,\r\n  Unauthorized = 401,\r\n  NotFound = 404,\r\n  InternalServerError = 500,\r\n}\r\n","import React, { useState } from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Container from '@material-ui/core/Container'\r\nimport { CssBaseline } from '@material-ui/core'\r\nimport { Routes } from 'app/utils/enums/routes'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}))\r\n\r\nconst CountrySearch: React.FC = () => {\r\n  const classes = useStyles()\r\n  const history = useHistory()\r\n  const [countryNameInput, setCountryNameInput] = useState<string>('')\r\n  const countrySearchRoute = `${Routes.Countries}/${countryNameInput}`\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <CssBaseline />\r\n      <div className={classes.paper}>\r\n        <form\r\n          className={classes.form}\r\n          noValidate\r\n          autoComplete=\"off\"\r\n          onSubmit={(e) => {\r\n            e.preventDefault()\r\n            history.push(countrySearchRoute)\r\n          }}\r\n        >\r\n          <TextField\r\n            value={countryNameInput}\r\n            required\r\n            fullWidth\r\n            autoFocus\r\n            label=\"Enter Country\"\r\n            variant=\"outlined\"\r\n            onChange={(e) => setCountryNameInput(e.target.value)}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={!Boolean(countryNameInput)}\r\n            type=\"submit\"\r\n            fullWidth\r\n            className={classes.submit}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default CountrySearch\r\n","import {\r\n  INTERNAL_SERVER_ERROR,\r\n  SOMETHING_WENT_WRONG,\r\n} from 'app/utils/constants'\r\nimport { HttpStatusCodes } from 'app/utils/enums/http-status-codes'\r\nimport axios, { AxiosError, AxiosResponse } from 'axios'\r\n\r\nconst httpClient = axios\r\n\r\nhttpClient.interceptors.response.use(\r\n  (response: AxiosResponse) => response,\r\n  (error: AxiosError) => {\r\n    switch (error.response?.status) {\r\n      case HttpStatusCodes.Unauthorized:\r\n      case HttpStatusCodes.BadRequest:\r\n        break\r\n      case HttpStatusCodes.InternalServerError:\r\n        if (process.env.NODE_ENV === 'development') {\r\n          console.log(INTERNAL_SERVER_ERROR)\r\n        } else {\r\n          console.log(SOMETHING_WENT_WRONG)\r\n        }\r\n        break\r\n      default:\r\n        break\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default httpClient\r\n","export const ERROR_FETCHING_WEATHER =\r\n  'Some error occurred while fetching weather!'\r\nexport const ERROR_FETCHING_COUNTRIES = 'No countries found!'\r\n\r\nexport const INTERNAL_SERVER_ERROR = 'Internal Server Error'\r\nexport const SOMETHING_WENT_WRONG = 'Something went wrong'\r\n","import { ICountry } from 'app/utils/interfaces/country'\r\nimport { AxiosResponse } from 'axios'\r\nimport httpClient from 'app/services/http-service'\r\nimport { COUNTRIES_API_BASE_URL } from 'app/configs'\r\n\r\nconst countryHttpClient = httpClient.create({\r\n  baseURL: COUNTRIES_API_BASE_URL,\r\n})\r\n\r\nconst getAll = (): Promise<AxiosResponse<ICountry[]>> =>\r\n  countryHttpClient.get(`/all`)\r\n\r\nconst getByName = (countryName: string): Promise<AxiosResponse<ICountry[]>> =>\r\n  countryHttpClient.get(`/name/${countryName}`)\r\n\r\nexport const countryService = {\r\n  getByName,\r\n  getAll,\r\n}\r\nexport default countryService\r\n","export const COUNTRIES_API_BASE_URL = process.env.REACT_APP_COUNTRY_API\r\nexport const WEATHER_API_BASE_URL = process.env.REACT_APP_WEATHER_API\r\nexport const WEATHER_API_ACCESS_KEY = process.env.REACT_APP_WEATHER_API_KEY\r\n","import { makeStyles } from '@material-ui/core/styles'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport CardActionArea from '@material-ui/core/CardActionArea'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport { ICountry } from 'app/utils/interfaces/country'\r\nimport Divider from '@material-ui/core/Divider'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    maxWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  media: {\r\n    height: 140,\r\n  },\r\n  centered: {\r\n    justifyContent: 'center',\r\n  },\r\n  customCard: {\r\n    display: 'flex',\r\n    height: 184,\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n  },\r\n})\r\n\r\ninterface CountryCardProps {\r\n  country: ICountry\r\n  onClickWeatherCapitalButton: any\r\n}\r\n\r\nconst CountryCard = ({\r\n  country,\r\n  onClickWeatherCapitalButton,\r\n}: CountryCardProps) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          className={classes.media}\r\n          image={country.flag}\r\n          title={country.name}\r\n        />\r\n        <Divider />\r\n        <CardContent className={classes.customCard}>\r\n          <Typography gutterBottom variant=\"h6\">\r\n            {country.name}\r\n            <Typography variant=\"subtitle1\" component=\"p\" color=\"textSecondary\">\r\n              {country.capital}\r\n            </Typography>\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"primary\" component=\"p\">\r\n            Population :{' '}\r\n            <Typography variant=\"body2\" component=\"span\" color=\"textSecondary\">\r\n              {country.population}\r\n            </Typography>\r\n          </Typography>\r\n          <Typography variant=\"body1\" color=\"primary\" component=\"p\">\r\n            Latitude, Longitude :{' '}\r\n            <Typography variant=\"body2\" component=\"span\" color=\"textSecondary\">\r\n              {country.latlng[0] + '°  ' + country.latlng[1] + '°'}\r\n            </Typography>\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <Divider />\r\n      <CardActions className={classes.centered}>\r\n        <Button\r\n          onClick={onClickWeatherCapitalButton}\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"small\"\r\n        >\r\n          Capital Weather\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CountryCard\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport { makeStyles, Theme } from '@material-ui/core'\r\nimport { ICapitalWeatherInfo } from 'app/utils/interfaces/weather'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n    maxWidth: 345,\r\n    minHeight: 200,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    margin: '10px auto',\r\n  },\r\n  loader: {\r\n    alignItems: 'center',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: theme.spacing(1),\r\n    top: theme.spacing(1),\r\n    color: theme.palette.grey[500],\r\n  },\r\n  centerContent: {\r\n    alignItems: 'center',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column',\r\n  },\r\n}))\r\n\r\ninterface IWeatherInfoModalProps {\r\n  open: boolean\r\n  capitalWeatherInfo: ICapitalWeatherInfo\r\n  handleClose: () => void\r\n}\r\n\r\nconst WeatherInfoModal: React.FC<IWeatherInfoModalProps> = ({\r\n  open,\r\n  handleClose,\r\n  capitalWeatherInfo,\r\n}: IWeatherInfoModalProps) => {\r\n  const classes = useStyles()\r\n  return (\r\n    <Dialog\r\n      onClose={handleClose}\r\n      aria-labelledby=\"customized-dialog-title\"\r\n      open={open}\r\n      fullWidth={true}\r\n      maxWidth={'sm'}\r\n    >\r\n      <DialogTitle disableTypography id=\"customized-dialog-title\">\r\n        <Typography variant=\"h6\">Weather Information</Typography>\r\n        <IconButton\r\n          aria-label=\"close\"\r\n          className={classes.closeButton}\r\n          onClick={handleClose}\r\n        >\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </DialogTitle>\r\n      <DialogContent dividers className={classes.centerContent}>\r\n        <Typography variant=\"h4\">\r\n          {capitalWeatherInfo?.location?.name}\r\n        </Typography>\r\n        {capitalWeatherInfo?.current?.weather_icons?.map(\r\n          (weatherIconUrl: string) => (\r\n            <Avatar variant=\"rounded\" src={weatherIconUrl} />\r\n          )\r\n        )}\r\n        <Typography variant=\"body1\" color=\"textSecondary\">\r\n          Temperature : {capitalWeatherInfo?.current?.temperature + '°'}\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"textSecondary\">\r\n          Wind Speed : {capitalWeatherInfo?.current?.wind_speed} km/h\r\n        </Typography>\r\n        <Typography variant=\"body1\" color=\"textSecondary\">\r\n          Precipitation : {capitalWeatherInfo?.current?.precip} %\r\n        </Typography>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          variant=\"contained\"\r\n          autoFocus\r\n          onClick={handleClose}\r\n          color=\"primary\"\r\n          className={classes.centerContent}\r\n        >\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default WeatherInfoModal\r\n","import { AxiosResponse } from 'axios'\r\nimport httpClient from 'app/services/http-service'\r\nimport { ICapitalWeatherInfo } from 'app/utils/interfaces/weather'\r\nimport { WEATHER_API_ACCESS_KEY, WEATHER_API_BASE_URL } from 'app/configs'\r\nexport const weatherHttpClient = httpClient.create({\r\n  baseURL: WEATHER_API_BASE_URL,\r\n})\r\n\r\nconst getWeatherByCity = (\r\n  cityName: string\r\n): Promise<AxiosResponse<ICapitalWeatherInfo>> =>\r\n  weatherHttpClient.get(\r\n    `/current?access_key=${WEATHER_API_ACCESS_KEY}&query=${cityName}`\r\n  )\r\n\r\nconst weatherService = {\r\n  getWeatherByCity,\r\n}\r\n\r\nexport default weatherService\r\n","import {\r\n  CircularProgress,\r\n  Container,\r\n  Grid,\r\n  makeStyles,\r\n  Typography,\r\n} from '@material-ui/core'\r\nimport countryService from 'app/services/country-service'\r\nimport { ICountry } from 'app/utils/interfaces/country'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport CountryCard from 'app/components/Country/CountryCard'\r\nimport {\r\n  ERROR_FETCHING_COUNTRIES,\r\n  ERROR_FETCHING_WEATHER,\r\n} from 'app/utils/constants'\r\nimport WeatherInfoModal from 'app/components/Weather/WeatherInfoModal'\r\nimport weatherService from 'app/services/weather-service'\r\nimport { ICapitalWeatherInfo } from 'app/utils/interfaces/weather'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    paddingTop: theme.spacing(8),\r\n    paddingBottom: theme.spacing(8),\r\n  },\r\n}))\r\n\r\nconst CountryList: React.FC = () => {\r\n  const classes = useStyles()\r\n  const { countryName } = useParams<{ countryName: string }>()\r\n  const [loading, setLoading] = useState(true)\r\n  const [showWeatherInfoModal, setShowWeatherInfoModal] = useState(false)\r\n  const [countries, setCountries] = useState<ICountry[]>([])\r\n  const [capitalWeatherInfo, setCapitalWeatherInfo] =\r\n    useState<ICapitalWeatherInfo>({} as ICapitalWeatherInfo)\r\n\r\n  const handleGetCapitalWeatherInfo = async (currentCountry: ICountry) => {\r\n    try {\r\n      const result = await weatherService.getWeatherByCity(\r\n        currentCountry.capital\r\n      )\r\n      if (result.data) {\r\n        setCapitalWeatherInfo(result.data)\r\n        setShowWeatherInfoModal(true)\r\n      }\r\n    } catch (e) {\r\n      console.log(ERROR_FETCHING_WEATHER)\r\n    } finally {\r\n    }\r\n  }\r\n\r\n  const handleClose = () => setShowWeatherInfoModal(false)\r\n\r\n  const getCountries = async () => {\r\n    try {\r\n      const result = await countryService.getByName(countryName)\r\n      if (result.data) {\r\n        setCountries(result.data)\r\n      }\r\n    } catch (e) {\r\n      console.log(e)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getCountries()\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [])\r\n  return (\r\n    <Container className={classes.cardGrid} maxWidth=\"md\">\r\n      <Grid container spacing={4} justifyContent=\"center\">\r\n        {loading && <CircularProgress size={60} />}\r\n        {!loading && countries.length === 0 && (\r\n          <Typography gutterBottom variant=\"h6\">\r\n            {ERROR_FETCHING_COUNTRIES}\r\n          </Typography>\r\n        )}\r\n        {countries.map((country: ICountry) => {\r\n          return (\r\n            <Grid item key={country.alpha2Code} xs={12} sm={6} md={4}>\r\n              <CountryCard\r\n                country={country}\r\n                onClickWeatherCapitalButton={() =>\r\n                  handleGetCapitalWeatherInfo(country)\r\n                }\r\n              />\r\n            </Grid>\r\n          )\r\n        })}\r\n        <WeatherInfoModal\r\n          open={showWeatherInfoModal}\r\n          handleClose={handleClose}\r\n          capitalWeatherInfo={capitalWeatherInfo}\r\n        />\r\n      </Grid>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default CountryList\r\n","import { AppBar, makeStyles, Toolbar, Typography } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  toolbar: {\r\n    margin: '0 auto',\r\n  },\r\n  h5: {\r\n    color: 'white',\r\n  },\r\n}))\r\n\r\nconst Navbar = () => {\r\n  const classes = useStyles()\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar className={classes.toolbar}>\r\n        <Typography variant=\"h5\" className={classes.h5}>\r\n          Country and Weather Info\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nexport default Navbar\r\n","import { createTheme } from '@material-ui/core'\r\n\r\nconst appTheme = createTheme({\r\n  typography: {\r\n    fontFamily: 'Montserrat',\r\n  },\r\n})\r\n\r\nexport default appTheme\r\n","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom'\r\nimport CountrySearch from 'app/pages/CountrySearch'\r\nimport CountryList from 'app/pages/CountryList'\r\nimport Navbar from 'app/components/Navbar'\r\nimport { Routes } from 'app/utils/enums/routes'\r\nimport { ThemeProvider } from '@material-ui/core'\r\nimport appTheme from 'app/configs/theme'\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <ThemeProvider theme={appTheme}>\r\n      <Router>\r\n        <Navbar />\r\n        <Switch>\r\n          <Route exact path={Routes.Home} component={CountrySearch} />\r\n          <Route exact path={Routes.CountriesByName} component={CountryList} />\r\n          <Redirect to={Routes.Home} />\r\n        </Switch>\r\n      </Router>\r\n    </ThemeProvider>\r\n  )\r\n}\r\nexport default App\r\n","import { ReportHandler } from 'web-vitals'\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from 'app/App'\r\nimport reportWebVitals from './reportWebVitals'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}